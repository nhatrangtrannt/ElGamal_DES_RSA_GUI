#include <iostream>
#include <string>
#include <bitset>
#include "../InfInt/InfInt.h"
#include "../hybrid/DES.h"    
#include "../hybrid/ElGamal.h"     
#include "../hybrid/RSA.h"                  
using namespace std;


int main()
{
    
    string message = "";
    bool choice = true;
    int bitsize = 64;
    cout << "\nWelcome to Hybrid Cryptographic Scheme Program using El Gamal and DES!!!\n";
    cout << "Enter your message: "; 
    getline(cin, message);

    while (choice == true){
        cout << "Enter a bit size that you want (32, 64, 128, 256, 512, 1024): "; 
        cin >> bitsize;
        if (bitsize < 32){
            cout << "Please enter a larger bit size: " << "\n";
            continue;
        }else{
            choice = false;
        }
    }

    // El Gamal Implementation
    cout << "\n===================================\n";
    cout << "===== El Gamal Implementation =====\n";
    cout << "===================================\n";
    // Generate one time session_key using El Gamal given bitsize
    InfInt session_key = el_gamal(bitsize);


    cout << "\n\nOne-time session key for both parties: " << session_key << "\n";
    

    // DES Implementation 
    cout << "\n==============================\n";
    cout << "===== DES Implementation =====\n";
    cout << "==============================\n";


    // Encrypt the message using subkeys_list which is generated by session_key from El Gamal
    cout << "\nEncryption: \n";
    generate_key_encrypt(session_key);
    string cipher;
    cipher = des(message, subkeys_list, "enc");
    cout << "Ciphertext in text: " << cipher << "\n";

    // Decrypt using session_key with a new key generator function
    cout << "\nDecryption: \n";
    generate_key_decrypt(session_key);
    string plaintext;
    plaintext = des(cipher, subkeys_list, "dec");
    cout << "Plaintext: " << plaintext << "\n";
}
